# Project generation service logic
import os
import shutil
from typing import Dict, Any
from core.models import ProjectCreate
from fastapi import HTTPException

def generate_project(data: ProjectCreate) -> Dict[str, Any]:
    # Validate output directory

    output_dir = os.path.abspath(data.output_dir)
    try:
        if not os.path.isdir(output_dir):
            os.makedirs(output_dir, exist_ok=True)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to create output directory: {str(e)}")

    project_path = os.path.join(output_dir, data.name)
    if os.path.exists(project_path):
        raise HTTPException(status_code=400, detail="Project directory already exists.")

    try:
        os.makedirs(project_path)
        # Example: create CMakeLists.txt with variable substitution
        cmake_content = f"""
cmake_minimum_required(VERSION 3.15)
project({data.name} VERSION {data.version})

add_subdirectory(Source)
"""
        with open(os.path.join(project_path, "CMakeLists.txt"), "w") as f:
            f.write(cmake_content)

        # Create Source directory and main.cpp
        src_dir = os.path.join(project_path, "Source")
        os.makedirs(src_dir)
        with open(os.path.join(src_dir, "main.cpp"), "w") as f:
            f.write(f"// Main entry for {data.product_name}\n")

        # Optionally: add more files (README, config, CI, etc.)
        with open(os.path.join(project_path, "README.md"), "w") as f:
            f.write(f"# {data.product_name}\n\nGenerated by Juno.")

        # Return project info
        return {"success": True, "project_path": project_path}
    except Exception as e:
        # Clean up if failed
        if os.path.exists(project_path):
            shutil.rmtree(project_path)
        raise HTTPException(status_code=500, detail=f"Project generation failed: {str(e)}")
